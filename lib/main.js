// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var CND, TrieMap, badge, debug, echo, help, info, rpr, urge, warn;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TRIODE';

  debug = CND.get_logger('debug', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  warn = CND.get_logger('warn', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  TrieMap = require('mnemonist/trie-map');

  //-----------------------------------------------------------------------------------------------------------
  this.new = function(settings) {
    var delete_, do_sort, find, set, sort_method, trie;
    trie = new TrieMap();
    do_sort = null;
    if ((do_sort = settings != null ? settings.sort : void 0) != null) {
      if (do_sort === false) {
        null;
      } else if (do_sort === true) {
        sort_method = function(a, b) {
          if (a[0] < b[0]) {
            return -1;
          }
          if (a[0] > b[0]) {
            return +1;
          }
          return 0;
        };
      } else if (CND.isa_text(do_sort)) {
        sort_method = function(a, b) {
          if (a[1][do_sort] < b[1][do_sort]) {
            return -1;
          }
          if (a[1][do_sort] > b[1][do_sort]) {
            return +1;
          }
          return 0;
        };
      } else {
        throw new Error(`Âµ39833 expected a text or a boolean, got a ${CND.type_of(do_sort)}`);
      }
    }
    //.........................................................................................................
    find = (prefix) => {
      var R;
      R = trie.find(prefix);
      if (sort_method != null) {
        R.sort(sort_method);
      }
      return R;
    };
    //.........................................................................................................
    set = function(key, value) {
      return trie.set(key, value);
    };
    delete_ = function(key) {
      return trie.delete(key);
    };
    return {
      //.........................................................................................................
      find,
      set,
      delete: delete_
    };
  };

}).call(this);

//# sourceMappingURL=main.js.map
