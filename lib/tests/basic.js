// Generated by CoffeeScript 1.12.2
(function() {
  var CND, TAP, TRIODE, badge, debug, echo, help, info, rpr, urge, warn;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TRIODE/TESTS/basic';

  debug = CND.get_logger('debug', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  warn = CND.get_logger('warn', badge);

  echo = CND.echo.bind(CND);

  TAP = require('tap');

  TRIODE = require('../..');

  TAP.test("incipient", function(T) {
    var error, i, idx, len, triode, word, words;
    words = ['33333333', '306ca2f7994a35eef-460-jpg', '00d59e245c257deb6-445-jpg'];
    triode = TRIODE["new"]();
    for (idx = i = 0, len = words.length; i < len; idx = ++i) {
      word = words[idx];
      triode[word] = {
        word: word,
        idx: idx
      };
    }
    try {
      info('1', triode['3']);
    } catch (error1) {
      error = error1;
      warn(error['message']);
    }
    T.ok(CND.equals(triode['30'], {
      word: '306ca2f7994a35eef-460-jpg',
      idx: 1
    }));
    T.ok(CND.equals(triode['00d59'], {
      word: '00d59e245c257deb6-445-jpg',
      idx: 2
    }));
    T.ok(CND.equals(triode['ffffffff'], void 0));
    delete triode['00d59'];
    help(triode);
    info('5', triode['00d59']);
    T.ok(CND.equals(triode['00d'], void 0));
    try {
      delete triode['3'];
    } catch (error1) {
      error = error1;
      warn(error['message']);
    }
    help(triode);
    return T.end();
  });

}).call(this);

//# sourceMappingURL=basic.js.map
