{
  "version": 3,
  "file": "main.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/main.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TRIODE/TESTS/basic'\ndebug                     = CND.get_logger 'debug',     badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nhelp                      = CND.get_logger 'help',      badge\nwarn                      = CND.get_logger 'warn',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\ntest                      = require 'guy-test'\nTRIODE                    = require '../..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"basic\" ] = ( T, done ) ->\n  triode = TRIODE.new()\n  triode.set 'aluminum',  { word: 'aluminum', text: 'a metal', }\n  triode.set 'aluminium', { word: 'aluminium', text: 'a metal', }\n  triode.set 'alumni',    { word: 'alumni', text: 'a former student', }\n  triode.set 'alphabet',  { word: 'alphabet', text: 'a kind of writing system', }\n  triode.set 'abacus',    { word: 'abacus', text: 'a manual calculator', }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [\"a\",[[\"abacus\",{\"word\":\"abacus\",\"text\":\"a manual calculator\"}],[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"a kind of writing system\"}],[\"alumni\",{\"word\":\"alumni\",\"text\":\"a former student\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"a metal\"}]],null]\n    [\"alu\",[[\"alumni\",{\"word\":\"alumni\",\"text\":\"a former student\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"a metal\"}]],null]\n    [\"alp\",[[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"a kind of writing system\"}]],null]\n    [\"b\",[],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = triode.find probe\n      # urge jr [ probe, result, null, ]\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting 1\" ] = ( T, done ) ->\n  triode = TRIODE.new { sort: 'text', }\n  triode.set 'aluminum',  { word: 'aluminum', text: '05 a metal', }\n  triode.set 'aluminium', { word: 'aluminium', text: '04 a metal', }\n  triode.set 'alumni',    { word: 'alumni', text: '02 a former student', }\n  triode.set 'alphabet',  { word: 'alphabet', text: '03 a kind of writing system', }\n  triode.set 'abacus',    { word: 'abacus', text: '01 a manual calculator', }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [\"a\",[[\"abacus\",{\"word\":\"abacus\",\"text\":\"01 a manual calculator\"}],[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}],[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"03 a kind of writing system\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}]],null]\n    [\"alu\",[[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}]],null]\n    [\"alp\",[[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"03 a kind of writing system\"}]],null]\n    [\"b\",[],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = triode.find probe\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting 2\" ] = ( T, done ) ->\n  triode = TRIODE.new { sort: true, }\n  triode.set 'aluminum',  { word: 'aluminum', text: '05 a metal', }\n  triode.set 'aluminium', { word: 'aluminium', text: '04 a metal', }\n  triode.set 'alumni',    { word: 'alumni', text: '02 a former student', }\n  triode.set 'alphabet',  { word: 'alphabet', text: '03 a kind of writing system', }\n  triode.set 'abacus',    { word: 'abacus', text: '01 a manual calculator', }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [\"a\",[[\"abacus\",{\"word\":\"abacus\",\"text\":\"01 a manual calculator\"}],[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"03 a kind of writing system\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}],[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}]],null] #! expected result: [[\"abacus\",{\"word\":\"abacus\",\"text\":\"01 a manual calculator\"}],[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}],[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"03 a kind of writing system\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}]]\n    [\"alu\",[[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}],[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}]],null] #! expected result: [[\"alumni\",{\"word\":\"alumni\",\"text\":\"02 a former student\"}],[\"aluminium\",{\"word\":\"aluminium\",\"text\":\"04 a metal\"}],[\"aluminum\",{\"word\":\"aluminum\",\"text\":\"05 a metal\"}]]\n    [\"alp\",[[\"alphabet\",{\"word\":\"alphabet\",\"text\":\"03 a kind of writing system\"}]],null]\n    [\"b\",[],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = triode.find probe\n      resolve result\n      return null\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n  test @[ \"basic\" ]\n\n\n\n"
  ]
}