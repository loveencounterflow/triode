{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TRIODE'\ndebug                     = CND.get_logger 'debug',     badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nhelp                      = CND.get_logger 'help',      badge\nwarn                      = CND.get_logger 'warn',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTrieMap                   = require 'mnemonist/trie-map'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new = ( settings ) ->\n  f = ->\n    do_sort   = null\n    if ( do_sort = settings?.sort )?\n      if do_sort is false\n        null\n      else if do_sort is true\n        sort_method = ( a, b ) ->\n          return -1 if a[ 0 ] < b[ 0 ]\n          return +1 if a[ 0 ] > b[ 0 ]\n          return 0\n      else if ( CND.isa_text do_sort )\n        sort_method = ( a, b ) ->\n          return -1 if a[ 1 ][ do_sort ] < b[ 1 ][ do_sort ]\n          return +1 if a[ 1 ][ do_sort ] > b[ 1 ][ do_sort ]\n          return 0\n      else\n        throw new Error \"µ12345 expected a text or a boolean, got a #{CND.type_of do_sort}\"\n    #.......................................................................................................\n    @find = ( prefix ) =>\n      R = trie.find prefix\n      R.sort sort_method if sort_method?\n      return R\n    #.......................................................................................................\n    @get_keys_sorted_by_length = ->\n      return [ @keys()..., ].sort ( a, b ) ->\n        return -1 if a.length < b.length\n        return +1 if a.length > b.length\n        return  0\n    #.......................................................................................................\n    @get_longer_keys = ( key ) ->\n      unless ( type = CND.type_of key  ) is 'text'\n        throw new Error \"µ12346 expected a text, got a #{type}\"\n      if not @has key\n        throw new Error \"µ12349 unknown key #{rpr key}\"\n      R = @get_keys_sorted_by_length()\n      for idx in [ 0 ... R.length ]\n        break if R[ idx ].length > key.length\n      return R[ idx .. ]\n    #.......................................................................................................\n    @superkeys_from_key = ( key ) ->\n      unless ( type = CND.type_of key  ) is 'text'\n        throw new Error \"µ12346 expected a text, got a #{type}\"\n      if not @has key\n        throw new Error \"µ12349 unknown key #{rpr key}\"\n      return ( sp for sp in @get_longer_keys key when sp.startsWith key )\n    #.......................................................................................................\n    @get_all_superkeys = ->\n      R = {}\n      for key from @keys()\n        R[ key ] = superprefixes if ( superprefixes = @superkeys_from_key key ).length > 0\n      return R\n    #.......................................................................................................\n    @disambiguate_subkey = ( old_key, new_key ) ->\n      unless ( type = CND.type_of old_key  ) is 'text'\n        throw new Error \"µ12346 expected a text, got a #{type}\"\n      #.....................................................................................................\n      unless ( type = CND.type_of new_key ) is 'text'\n        throw new Error \"µ12347 expected a text, got a #{type}\"\n      #.....................................................................................................\n      if ( @superkeys_from_key old_key ).length is 0\n        throw new Error \"µ12348 old key #{rpr old_key} is not ambiguous\"\n      #.....................................................................................................\n      if @has new_key\n        throw new Error \"µ12349 new key #{rpr new_key} already in use\"\n      @replace old_key, new_key\n      #.....................................................................................................\n      if ( @superkeys_from_key new_key ).length isnt 0\n        throw new Error \"µ12350 new key #{rpr new_key} is still ambiguous\"\n      return null\n    #.......................................................................................................\n    @replace = ( old_key, new_key ) ->\n      #.....................................................................................................\n      if not @has old_key\n        throw new Error \"µ12349 unknown old key #{rpr old_key}\"\n      #.....................................................................................................\n      if @has new_key\n        throw new Error \"µ12349 new key #{rpr new_key} already in use\"\n      #.....................................................................................................\n      value = @get old_key\n      @delete old_key\n      @set new_key, value\n      return null\n    #.......................................................................................................\n    return @\n  #.........................................................................................................\n  trie = new TrieMap()\n  return f.apply Object.create trie\n\n\n"
  ]
}