{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAC4G;EAAA;AAAA,MAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA;;EAC5G,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EATgF;;;EAW5G,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,OAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,KAH5B,EAd4G;;;EAqB5G,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,QAAF,CAAA;AACP,QAAA,CAAA,EAAA;IAAE,CAAA,GAAI,QAAA,CAAA,CAAA;AACN,UAAA,aAAA,EAAA,cAAA,EAAA,OAAA,EAAA,WAAA;;MACI,aAAA,GAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;QACd,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAA,GAAW,CAAxB;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAA,GAAW,CAAxB;AAAA,iBAAO,CAAC,EAAR;;AACA,eAAQ;MALM,EADpB;;MAQI,cAAA,GAAiB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;QACf,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAA,GAAW,CAAxB;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAA,GAAW,CAAxB;AAAA,iBAAO,CAAC,EAAR;;AACA,eAAQ;MALO,EARrB;;MAeI,OAAA,GAAY;MACZ,IAAG,6DAAH;QACE,IAAG,OAAA,KAAW,KAAd;UACE,KADF;SAAA,MAEK,IAAG,OAAA,KAAW,IAAd;UACH,WAAA,GAAc,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;YACZ,IAAa,CAAC,CAAE,CAAF,CAAD,GAAS,CAAC,CAAE,CAAF,CAAvB;AAAA,qBAAO,CAAC,EAAR;;YACA,IAAa,CAAC,CAAE,CAAF,CAAD,GAAS,CAAC,CAAE,CAAF,CAAvB;AAAA,qBAAO,CAAC,EAAR;;AACA,mBAAO;UAHK,EADX;SAAA,MAKA,IAAK,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAL;UACH,WAAA,GAAc,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;YACZ,IAAa,CAAC,CAAE,CAAF,CAAK,CAAE,OAAF,CAAN,GAAoB,CAAC,CAAE,CAAF,CAAK,CAAE,OAAF,CAAvC;AAAA,qBAAO,CAAC,EAAR;;YACA,IAAa,CAAC,CAAE,CAAF,CAAK,CAAE,OAAF,CAAN,GAAoB,CAAC,CAAE,CAAF,CAAK,CAAE,OAAF,CAAvC;AAAA,qBAAO,CAAC,EAAR;;AACA,mBAAO;UAHK,EADX;SAAA,MAAA;UAMH,MAAM,IAAI,KAAJ,CAAU,CAAA,2CAAA,CAAA,CAA8C,OAAA,CAAQ,OAAR,CAA9C,CAAA,CAAV,EANH;SARP;OAhBJ;;MAgCI,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAE,MAAF,CAAA;AACZ,YAAA;QAAM,CAAA,GAAI,IAAI,CAAC,IAAL,CAAU,MAAV;QACJ,IAAsB,mBAAtB;UAAA,CAAC,CAAC,IAAF,CAAO,WAAP,EAAA;;AACA,eAAO;MAHD,EAhCZ;;MAqCI,IAAC,CAAA,6BAAD,GAAkC,QAAA,CAAA,CAAA;eAAG,CAAE,GAAA,IAAC,CAAA,IAAD,CAAA,CAAF,CAAe,CAAC,IAAhB,CAAqB,aAArB;MAAH;MAClC,IAAC,CAAA,8BAAD,GAAkC,QAAA,CAAA,CAAA;eAAG,CAAE,GAAA,IAAC,CAAA,IAAD,CAAA,CAAF,CAAe,CAAC,IAAhB,CAAqB,cAArB;MAAH,EAtCtC;;MAwCI,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,GAAF,CAAA;AACvB,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAM,QAAQ,CAAC,IAAT,CAAc,GAAd;QACA,IAAG,CAAI,IAAC,CAAA,GAAD,CAAK,GAAL,CAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,GAAA,CAAI,GAAJ,CAAtB,CAAA,CAAV,EADR;;QAEA,CAAA,GAAI,IAAC,CAAA,6BAAD,CAAA;QACJ,KAAW,uFAAX;UACE,IAAS,CAAC,CAAE,GAAF,CAAO,CAAC,MAAT,GAAkB,GAAG,CAAC,MAA/B;AAAA,kBAAA;;QADF;AAEA,eAAO,CAAC;MAPS,EAxCvB;;MAiDI,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,GAAF,CAAA;AAC1B,YAAA;QAAM,QAAQ,CAAC,IAAT,CAAc,GAAd;QACA,IAAG,CAAI,IAAC,CAAA,GAAD,CAAK,GAAL,CAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,GAAA,CAAI,GAAJ,CAAtB,CAAA,CAAV,EADR;;AAEA;;AAAS;AAAA;UAAA,KAAA,qCAAA;;gBAAuC,EAAE,CAAC,UAAH,CAAc,GAAd;2BAAvC;;UAAA,CAAA;;;MAJW,EAjD1B;;MAuDI,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAA,CAAA;AACzB,YAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAM,CAAA,GAAI,CAAA;AACJ;QAAA,KAAA,UAAA;UACE,IAA4B,CAAE,aAAA,GAAgB,IAAC,CAAA,kBAAD,CAAoB,GAApB,CAAlB,CAA2C,CAAC,MAA5C,GAAqD,CAAjF;YAAA,CAAC,CAAE,GAAF,CAAD,GAAW,cAAX;;QADF;AAEA,eAAO;MAJY,EAvDzB;;;MA8DI,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAA,CAAA;eAAG,CAAE,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,iBAAD,CAAA,CAAZ,CAAF,CAAoC,CAAC,MAArC,GAA8C;MAAjD,EA9DrB;;MAgEI,IAAC,CAAA,mBAAD,GAAuB,QAAA,CAAE,OAAF,EAAW,OAAX,CAAA;QACrB,QAAQ,CAAC,IAAT,CAAc,OAAd;QACA,QAAQ,CAAC,IAAT,CAAc,OAAd,EADN;;QAGM,IAAG,CAAE,IAAC,CAAA,kBAAD,CAAoB,OAApB,CAAF,CAA+B,CAAC,MAAhC,KAA0C,CAA7C;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,OAAJ,CAAlB,CAAA,iBAAA,CAAV,EADR;SAHN;;QAMM,IAAG,IAAC,CAAA,GAAD,CAAK,OAAL,CAAH;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,OAAJ,CAAlB,CAAA,eAAA,CAAV,EADR;;QAEA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAkB,OAAlB,EARN;;QAUM,IAAG,CAAE,IAAC,CAAA,kBAAD,CAAoB,OAApB,CAAF,CAA+B,CAAC,MAAhC,KAA4C,CAA/C;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,OAAJ,CAAlB,CAAA,mBAAA,CAAV,EADR;;AAEA,eAAO;MAbc,EAhE3B;;MA+EI,IAAC,CAAA,8BAAD,GAAkC,QAAA,CAAE,GAAF,CAAA;AACtC,YAAA,CAAA,EAAA,GAAA,EAAA,YAAA,EAAA,YAAA,EAAA,WAAA,EAAA;QAAM,QAAQ,CAAC,IAAT,CAAc,GAAd,EAAN;;QAEM,IAAG,CAAE,SAAA,GAAY,IAAC,CAAA,kBAAD,CAAoB,GAApB,CAAd,CAAuC,CAAC,MAAxC,KAAkD,CAArD;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,WAAA,CAAA,CAAc,GAAA,CAAI,GAAJ,CAAd,CAAA,iBAAA,CAAV,EADR;SAFN;;QAKM,WAAA,GAAc,IAAC,CAAA,GAAD,CAAK,GAAL,EALpB;;QAOM,KAAA,2CAAA;;UACE,YAAA,GAAe,WAAA,GAAc,YAAY;UACzC,IAAC,CAAA,OAAD,CAAS,YAAT,EAAuB,YAAvB;QAFF;AAGA,eAAO;MAXyB,EA/EtC;;MA4FI,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,OAAF,EAAW,OAAX,CAAA;AACf,YAAA,KAAA;;QACM,IAAG,CAAI,IAAC,CAAA,GAAD,CAAK,OAAL,CAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uBAAA,CAAA,CAA0B,GAAA,CAAI,OAAJ,CAA1B,CAAA,CAAV,EADR;SADN;;QAIM,IAAG,IAAC,CAAA,GAAD,CAAK,OAAL,CAAH;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,OAAJ,CAAlB,CAAA,eAAA,CAAV,EADR;SAJN;;QAOM,KAAA,GAAQ,IAAC,CAAA,GAAD,CAAK,OAAL;QACR,IAAC,CAAA,MAAD,CAAQ,OAAR;QACA,IAAC,CAAA,GAAD,CAAK,OAAL,EAAc,KAAd;AACA,eAAO;MAXE,EA5Ff;;MAyGI,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAA,CAAA;AACxC,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA;QAAM,IAAG,CAAE,OAAA,GAAU,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,iBAAD,CAAA,CAAZ,CAAZ,CAA8C,CAAC,MAA/C,GAAwD,CAA3D;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,kCAAA,CAAA,CAAqC,GAAA,CAAI,OAAJ,CAArC,CAAA,CAAV,EADR;SAAN;;QAGM,CAAA,GAAI;QACJ,CAAC,CAAC,IAAF,CAAO,eAAP;QACA,CAAC,CAAC,IAAF,CAAO,YAAP;AACA;QAAA,KAAA,qCAAA;;UACE,WAAA,GAAc,IAAC,CAAA,GAAD,CAAK,GAAL;UACd,CAAC,CAAC,IAAF,CAAO,CAAA,mBAAA,CAAA,CAAsB,GAAG,CAAC,YAAJ,CAAiB,GAAjB,CAAtB,CAAA,IAAA,CAAA,CAAiD,GAAA,CAAI,WAAJ,CAAjD,CAAA,GAAA,CAAP;QAFF;QAGA,CAAC,CAAC,IAAF,CAAO,kBAAP;AACA,eAAO,CAAC,CAAC,IAAF,CAAO,IAAP;MAX2B,EAzGxC;;MAsHI,IAAC,CAAA,2BAAD,GAA+B,QAAA,CAAA,CAAA;eAAG,IAAA,CAAK,IAAC,CAAA,gCAAD,CAAA,CAAL;MAAH,EAtHnC;;MAwHI,IAAC,CAAA,8BAAD,GAAkC,QAAA,CAAE,IAAF,CAAA;AACtC,YAAA,CAAA,EAAA,UAAA,EAAA;QAAM,MAAA,GAAc,IAAC,CAAA,gCAAD,CAAA;QACd,CAAA,CAAE,UAAF,EACE,MADF,CAAA,GACc,CAAE,MAAM,CAAC,KAAP,CAAa,0CAAb,CAAF,CAA2D,CAAC,MAD1E;QAEA,CAAA,GAAI;QACJ,CAAC,CAAC,IAAF,CAAO,iCAAP;QACA,CAAC,CAAC,IAAF,CAAO,CAAA,QAAA,CAAA,CAAW,GAAA,CAAI,IAAJ,CAAX,CAAA,yBAAA,CAAP;QACA,CAAC,CAAC,IAAF,CAAO,EAAP;QACA,CAAC,CAAC,IAAF,CAAO,CAAA,iBAAA,CAAA,CAAoB,UAApB,CAAA,CAAP;QACA,CAAC,CAAC,IAAF,CAAO,MAAP;AACA,eAAO,CAAC,CAAC,IAAF,CAAO,IAAP;MAVyB,EAxHtC;;MAoII,IAAC,CAAA,QAAD,GAAY,QAAA,CAAA,CAAA;eAAG,IAAC,CAAA,mBAAD,CAAA;MAAH,EApIhB;;MAsII,IAAC,CAAA,mBAAD,GAAuB,QAAA,CAAA,CAAA;AAC3B,YAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA;;QACM,CAAA,GAAI;QACJ,CAAC,CAAC,IAAF,CAAO,SAAP;QACA,CAAC,CAAC,IAAF,CAAO,kCAAP;AACA;QAAA,KAAA,QAAA;UAAI,CAAE,GAAF,EAAO,KAAP;UACF,CAAC,CAAC,IAAF,CAAO,CAAA,SAAA,CAAA,CAAY,EAAA,CAAG,GAAH,CAAZ,CAAA,EAAA,CAAA,CAAuB,EAAA,CAAG,KAAH,CAAvB,CAAA,GAAA,CAAP;QADF;QAEA,CAAC,CAAC,IAAF,CAAO,kBAAP;AACA,eAAO,CAAC,CAAC,IAAF,CAAO,IAAP;MARc,EAtI3B;;MAgJI,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAA,CAAA;eAAG,CAAE,IAAA,CAAK,IAAC,CAAA,mBAAD,CAAA,CAAL,CAAF,CAAA,CAAA;MAAH,EAhJtB;;MAkJI,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,IAAF,CAAA;AACzB,YAAA,CAAA,EAAA,UAAA,EAAA;QAAM,MAAA,GAAc,IAAC,CAAA,mBAAD,CAAA;QACd,CAAA,CAAE,UAAF,EACE,MADF,CAAA,GACc,CAAE,MAAM,CAAC,KAAP,CAAa,0CAAb,CAAF,CAA2D,CAAC,MAD1E;QAEA,CAAA,GAAI;QACJ,CAAC,CAAC,IAAF,CAAO,iCAAP;QACA,CAAC,CAAC,IAAF,CAAO,CAAA,QAAA,CAAA,CAAW,GAAA,CAAI,IAAJ,CAAX,CAAA,yBAAA,CAAP;QACA,CAAC,CAAC,IAAF,CAAO,EAAP;QACA,CAAC,CAAC,IAAF,CAAO,CAAA,UAAA,CAAA,CAAa,UAAb,CAAA,CAAP;QACA,CAAC,CAAC,IAAF,CAAO,MAAP;QACA,CAAC,CAAC,IAAF,CAAO,yBAAP;AACA,eAAO,CAAC,CAAC,IAAF,CAAO,IAAP;MAXY,EAlJzB;;AA+JI,aAAO;IAhKL,EAAN;;IAkKE,IAAA,GAAO,IAAI,OAAJ,CAAA;AACP,WAAO,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,MAAP,CAAc,IAAd,CAAR;EApKF;AArBqG",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TRIODE'\ndebug                     = CND.get_logger 'debug',     badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nhelp                      = CND.get_logger 'help',      badge\nwarn                      = CND.get_logger 'warn',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr, }                   = CND\nTrieMap                   = require 'mnemonist/trie-map'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new = ( settings ) ->\n  f = ->\n    #.......................................................................................................\n    by_length_asc = ( a, b ) ->\n      return -1 if a.length < b.length\n      return +1 if a.length > b.length\n      return -1 if a        < b\n      return +1 if a        > b\n      return  0\n    #.......................................................................................................\n    by_length_desc = ( a, b ) ->\n      return -1 if a.length > b.length\n      return +1 if a.length < b.length\n      return -1 if a        < b\n      return +1 if a        > b\n      return  0\n    #.......................................................................................................\n    do_sort   = null\n    if ( do_sort = settings?.sort )?\n      if do_sort is false\n        null\n      else if do_sort is true\n        sort_method = ( a, b ) ->\n          return -1 if a[ 0 ] < b[ 0 ]\n          return +1 if a[ 0 ] > b[ 0 ]\n          return 0\n      else if ( isa.text do_sort )\n        sort_method = ( a, b ) ->\n          return -1 if a[ 1 ][ do_sort ] < b[ 1 ][ do_sort ]\n          return +1 if a[ 1 ][ do_sort ] > b[ 1 ][ do_sort ]\n          return 0\n      else\n        throw new Error \"µ57633 expected a text or a boolean, got a #{type_of do_sort}\"\n    #.......................................................................................................\n    @find = ( prefix ) ->\n      R = trie.find prefix\n      R.sort sort_method if sort_method?\n      return R\n    #.......................................................................................................\n    @get_keys_sorted_by_length_asc  = -> [ @keys()..., ].sort by_length_asc\n    @get_keys_sorted_by_length_desc = -> [ @keys()..., ].sort by_length_desc\n    #.......................................................................................................\n    @get_longer_keys = ( key ) ->\n      validate.text key\n      if not @has key\n        throw new Error \"µ58275 unknown key #{rpr key}\"\n      R = @get_keys_sorted_by_length_asc()\n      for idx in [ 0 ... R.length ]\n        break if R[ idx ].length > key.length\n      return R[ idx .. ]\n    #.......................................................................................................\n    @superkeys_from_key = ( key ) ->\n      validate.text key\n      if not @has key\n        throw new Error \"µ58917 unknown key #{rpr key}\"\n      return ( sp for sp in @get_longer_keys key when sp.startsWith key )\n    #.......................................................................................................\n    @get_all_superkeys = ->\n      R = {}\n      for key from @keys()\n        R[ key ] = superprefixes if ( superprefixes = @superkeys_from_key key ).length > 0\n      return R\n    #.......................................................................................................\n    ### TAINT use more efficient method ###\n    @has_superkeys = -> ( Object.keys @get_all_superkeys() ).length > 0\n    #.......................................................................................................\n    @disambiguate_subkey = ( old_key, new_key ) ->\n      validate.text old_key\n      validate.text new_key\n      #.....................................................................................................\n      if ( @superkeys_from_key old_key ).length is 0\n        throw new Error \"µ59880 old key #{rpr old_key} is not ambiguous\"\n      #.....................................................................................................\n      if @has new_key\n        throw new Error \"µ60201 new key #{rpr new_key} already in use\"\n      @replace old_key, new_key\n      #.....................................................................................................\n      if ( @superkeys_from_key new_key ).length isnt 0\n        throw new Error \"µ60522 new key #{rpr new_key} is still ambiguous\"\n      return null\n    #.......................................................................................................\n    @apply_replacements_recursively = ( key ) ->\n      validate.text key\n      #.....................................................................................................\n      if ( superkeys = @superkeys_from_key key ).length is 0\n        throw new Error \"µ61164 key #{rpr key} is not ambiguous\"\n      #.....................................................................................................\n      replacement = @get key\n      #.....................................................................................................\n      for old_superkey in superkeys\n        new_superkey = replacement + old_superkey[ key.length ... ]\n        @replace old_superkey, new_superkey\n      return null\n    #.......................................................................................................\n    @replace = ( old_key, new_key ) ->\n      #.....................................................................................................\n      if not @has old_key\n        throw new Error \"µ61485 unknown old key #{rpr old_key}\"\n      #.....................................................................................................\n      if @has new_key\n        throw new Error \"µ61806 new key #{rpr new_key} already in use\"\n      #.....................................................................................................\n      value = @get old_key\n      @delete old_key\n      @set new_key, value\n      return null\n    #.......................................................................................................\n    @replacements_as_js_function_text = ->\n      if ( subkeys = Object.keys @get_all_superkeys() ).length > 0\n        throw new Error \"µ61806 must first resolve subkeys #{rpr subkeys}\"\n      #.....................................................................................................\n      R = []\n      R.push \"( text ) => {\"\n      R.push \"  R = text\"\n      for key in @get_keys_sorted_by_length_desc()\n        replacement = @get key\n        R.push \"  R = R.replace( /^#{CND.escape_regex key}$/, #{rpr replacement} );\"\n      R.push \"  return R; };\\n\"\n      return R.join '\\n'\n    #.......................................................................................................\n    @replacements_as_js_function = -> eval @replacements_as_js_function_text()\n    #.......................................................................................................\n    @replacements_as_js_module_text = ( name ) ->\n      source      = @replacements_as_js_function_text()\n      { first_line\n        source }  = ( source.match /^(?<first_line>[^\\n]+)\\n(?<source>.*)$/ms ).groups\n      R = []\n      R.push \"// Generated code, do not edit;\"\n      R.push \"// edit #{rpr name} instead and re-generate.\"\n      R.push \"\"\n      R.push \"module.exports = #{first_line}\"\n      R.push source\n      return R.join '\\n'\n    #.......................................................................................................\n    @toString = -> @as_js_function_text()\n    #.......................................................................................................\n    @as_js_function_text = ->\n      #.....................................................................................................\n      R = []\n      R.push \"() => {\"\n      R.push \"  R = require( 'triode' ).new();\"\n      for [ key, value, ] from @entries()\n        R.push \"  R.set( #{jr key}, #{jr value} );\"\n      R.push \"  return R; };\\n\"\n      return R.join '\\n'\n    #.......................................................................................................\n    @as_js_function = -> ( eval @as_js_function_text() )()\n    #.......................................................................................................\n    @as_js_module_text = ( name ) ->\n      source      = @as_js_function_text()\n      { first_line\n        source }  = ( source.match /^(?<first_line>[^\\n]+)\\n(?<source>.*)$/ms ).groups\n      R = []\n      R.push \"// Generated code, do not edit;\"\n      R.push \"// edit #{rpr name} instead and re-generate.\"\n      R.push \"\"\n      R.push \"const f = #{first_line}\"\n      R.push source\n      R.push \"module.exports = f();\\n\"\n      return R.join '\\n'\n    #.......................................................................................................\n    return @\n  #.........................................................................................................\n  trie = new TrieMap()\n  return f.apply Object.create trie\n\n\n"
  ]
}